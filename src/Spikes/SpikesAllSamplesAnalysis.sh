#! /bin/sh
#------------------------------------------------------------------------------------------------------------------
# Authors: Amandine VELT
# Mail: velt@igbmc.fr
# Date: March 2015
#------------------------------------------------------------------------------------------------------------------
# This script performs all analysis on spikes, on the file ${outdir}/Alignment/${samplename}_Spikes.sam
#------------------------------------------------------------------------------------------------------------------

###################################################################################################################
# Define the function to print the usage of the script
#------------------------------------------------------------------------------------------------------------------
function usage
{
	cat <<-__EOF__
		Usage:
		    sh SpikesAllSamplesAnalysis.sh -c config_file -o outdir [-h]

		Description:
		    This script performs all analysis on spikes, on the file ${outdir}/Alignment/${samplename}_Spikes.sam

		Options:
		 	-c, --config-file Config file of the run.
		        This option is required. 
		        Generally named : config.sh
		 	-o, --outdir Outdir of the run (defined in the run.sh script).
		        This option is required.
		    -h, --help
		        Print this message and exit the program.
		__EOF__
}
#------------------------------------------------------------------------------------------------------------------

###################################################################################################################
# Getting parameters from the input
#------------------------------------------------------------------------------------------------------------------
ARGS=$(getopt -o "c:o:h" --long "config-file:,outdir:,help" -- "$@" 2> /dev/null)
[ $? -ne 0 ] && \
	echo "Error in the argument list." "Use -h or --help to display the help." >&2 && \
	exit 1
eval set -- "$ARGS"
while true
do
	case "$1" in
		-c|--config-file)
			CONFIG_FILE="$2"
			shift 2 
			;;
		-o|--outdir)
			OUTDIR="$2"
			shift 2 
			;;
		-h|--help)
			usage
			exit 0
			;;
		--) shift
			break 
			;;
		*) 	echo "Option $1 is not recognized. " "Use -h or --help to display the help." && \
			exit 1
			;;
	esac
done
#------------------------------------------------------------------------------------------------------------------

#------------------------------------------------------------------------------------------------------------------
# Checking the input parameter
#------------------------------------------------------------------------------------------------------------------
[ "$CONFIG_FILE" == "" ] || [ "$OUTDIR" == "" ] && \
	echo "Options --config-file and --outdir are required. " "Use -h or --help to display the help." && exit 1;
#------------------------------------------------------------------------------------------------------------------

source $CONFIG_FILE

source "$SCRIPTSDIR/src/Utilities/utils.sh"

eval PYTHONPATH=$PYTHONPATH

#Creation of graphics of cover of reads along spikes
####################################################

#Creation of a folder for each sample in the $ outdir/quality_analysis/Spikes, containing a file with the ID of spikes, their size and position of the alignments.
#It also contains graphics of reads coverage along each spike and a coverage graphic of reads along all spikes. 
#Finally, the number of reads corresponding to spikes in each sample is added in file tophat_stats_summary.txt.

# the path to the htseq library depends on the htseq version, so it is determined.
export PYTHONPATH=${PYTHONPATH}/${HTSEQ_PYTHONPATH}/

# file containing the number of reads corresponding to spikes, for each sample,
# the % of spikes and the total number of reads in the raw fastq file.
touch $OUTDIR/Quality/Spikes/Number_of_reads.txt

# for each sam file, containing all the reads corresponding to spikes
for file in `ls ${OUTDIR}/Alignment/*/*_Spikes.sam`
do

	if [ -f "$file" ]
	then

		echo "****************************************"
		echo "`date`: Start analysis of Spikes (Coverage of reads along spikes)"
		echo "****************************************"

		#path/to/sample_name (= file name without final .fastq.gz)
		name=`echo ${file} | perl -e '$in=<>;print substr($in,0,length($in)-12);'`

		#sample name
		samplename=`echo $name | awk -F "/" '{print $NF}'`

		#Creation of file containing chromosomes/spikes ID and  alignment position
		make_directories $OUTDIR/Quality/Spikes/$samplename

		# "statsSpikesFile" file contains all the stats generated by bowtie when alignment with spikes
		# it allows the recovery of number of reads corresponding to spikes, % of spikes, and the total number of reads in the raw fastq file.
		statsSpikesFile="${OUTDIR}/Quality/stats_${samplename}_without_Spikes.txt"

		if [ -f "$statsSpikesFile" ]
		then

			NbrTotalReads=$( grep -A 7 $samplename ${statsSpikesFile} | grep "Total number of sequences" | cut -d"|" -f2 | sed "s/ //" )
			NbrTotalReadsWithoutSpikes=$( grep -A 7 $samplename ${statsSpikesFile} | grep "Number of sequences without spikes" | cut -d"|" -f2 | sed "s/ //" )
			NbrReadsSpikes=$( bc <<<"scale=0;(${NbrTotalReads}-${NbrTotalReadsWithoutSpikes})" )
			percentSpikes=$( bc <<<"scale=3;(${NbrReadsSpikes}*100/${NbrTotalReads})" )
			wait
			# All stats are written to the file "Number_of_reads.txt", 
			# this file will be used to create the table in the report of the spikes.
			echo "Number reads of spikes in $samplename : $NbrReadsSpikes reads ($percentSpikes %) of ${NbrTotalReads} total reads" >> $OUTDIR/Quality/Spikes/Number_of_reads.txt
				
			wait

		else

			echo "$statsSpikesFile doesn't exist => no stats generated"

		fi
		
		echo "`date`: Start analysis of Spikes (NRN + Fold-Change)"
		#Creation of graphics Concentration = f(NRN)
		############################################

		#Creation of ${samplename}_htseq_spikes.txt from ${samplename}_Spikes.sam, containing gene ID and reads number for spikes only.

		echo "`date` Creation of HTSeq file"

		# reads must be sorted by name for that HTSeq runs (ie the paired reads must be one after the other)
		samfile=${file}

		if [ "$PAIRED" = "yes" ]
		then

			# export LC_ALL=POSIX 
			# sort -s -k 1,1 ${file} > ${file}_sort
			# mv ${file}_sort ${file}

			# sort by name with samtools sort
			bamfile=$( echo $file | sed "s/\.sam/\.bam/" )
			tmp_bamfile=$( echo $file | sed "s/\.sam/_sort/" )
			sort_samfile=$( echo $file | sed "s/\.sam/_sort_by_name\.sam/" )


			$BIN/$SAMTOOLS_VERSION/samtools sort -n $bamfile ${tmp_bamfile}
			# create the corresponding sam
			$BIN/$SAMTOOLS_VERSION/samtools view -h -o ${sort_samfile} ${tmp_bamfile}.bam
			rm ${tmp_bamfile}.bam
			samfile=${sort_samfile}

		fi

		echo "########################################################################################################
		##############################################################################################################
		export PYTHONPATH=${PYTHONPATH}/${HTSEQ_PYTHONPATH}/
		##############################################################################################################"

		#Launch htseq with gtf annotation file of spikes
		echo "HTSeq command that will be launched :"
		echo "${BIN}/${HTSEQ_VERSION}/htseq-count -m intersection-nonempty -s ${STRANDED} ${samfile} ${GTF_SPIKES} > ${OUTDIR}/Quality/Spikes/${samplename}/${samplename}_htseq_spikes.txt"

		$BIN/$HTSEQ_VERSION/htseq-count -m intersection-nonempty -s ${STRANDED} ${samfile} ${GTF_SPIKES} > ${OUTDIR}/Quality/Spikes/${samplename}/${samplename}_htseq_spikes.txt

	else

		echo "$file doesn't exist => no htseq-count generated"

	fi

done

wait

# creation of htseq_combined_spikes.txt, which merge all the ${samplename}_htseq_spikes.txt files
echo "`date`Merge of all HTSeq files"

echo "Sample name	Number of assigned reads	Number of no feature reads	Number of ambiguous reads	Number of multiple alignments" > ${OUTDIR}/Quality/Spikes/htseq_stats_summary_spikes.txt

printf "Ensembl gene id" > tmptitre

#for each directory in the ${outdir}/quality_analysis/Spikes/
for dir in `ls -d ${OUTDIR}/Quality/Spikes/*/`
do
	echo "Analysis of directory $dir"
	
	#name of the directory
	name=`echo $dir | perl -e '$in=<>;@s=split("/",$in);print "$s[$#split-1]";'`
	printf "$name" >> ${OUTDIR}/Quality/Spikes/htseq_stats_summary_spikes.txt
	
	#print the name into a file to create the title of the combined htseq file
	printf "	$name" >> ${OUTDIR}/Quality/Spikes/tmptitre 
	
	#create a file with spike names
	grep 'ERCC' $dir/"$name"_htseq_spikes.txt | cut -f 1 > ${OUTDIR}/Quality/Spikes/tmpgenes_"$name"
	
	#create a file with corresponding occurrence number
	grep 'ERCC' $dir/"$name"_htseq_spikes.txt | cut -f 2  > ${OUTDIR}/Quality/Spikes/tmpocc_"$name"
		
	assigned=`grep 'ERCC' $dir/"$name"_htseq_spikes.txt | cut -f 2 | perl -e '$sum=0;while ($line=<>) {$sum=$sum+$line;}; print $sum; '`
	nofeature=`grep no_feature $dir/"$name"_htseq_spikes.txt | cut -f 2`
	ambiguous=`grep ambiguous $dir/"$name"_htseq_spikes.txt | cut -f 2`
	notunique=`grep alignment_not_unique $dir/"$name"_htseq_spikes.txt | cut -f 2`
	echo "	$assigned	$nofeature	$ambiguous	$notunique" >> ${OUTDIR}/Quality/Spikes/htseq_stats_summary_spikes.txt

done

wait

#compare the name of all spikes to verify that there are the same
printf "Check if all files contain the same genes identification numbers..."
comp=`ls ${OUTDIR}/Quality/Spikes/tmpgenes* | head -1` #the first file, which will be compared all other
for i in `ls ${OUTDIR}/Quality/Spikes/tmpgenes*`
do 
	diff $i $comp >> ${OUTDIR}/Quality/Spikes/test
done


#if all spikes are the same, combine all HTseq results file 
if (file ${OUTDIR}/Quality/Spikes/test | grep -v empty) >> /dev/null
	then
		echo "The identification numbers are not the same in all files !!!"
	else
		echo " OK"
		echo "Merge all files"
		paste $comp ${OUTDIR}/Quality/Spikes/tmpocc_* > ${OUTDIR}/Quality/Spikes/tmpcombined
		echo >> ${OUTDIR}/Quality/Spikes/tmptitre
		cat ${OUTDIR}/Quality/Spikes/tmptitre ${OUTDIR}/Quality/Spikes/tmpcombined > ${OUTDIR}/Quality/Spikes/htseq_combined_spikes.txt
fi

#remove temporary files
rm -f ${OUTDIR}/Quality/Spikes/tmp* ${OUTDIR}/Quality/Spikes/test

wait

HTSeqFile=${OUTDIR}/Quality/Spikes/htseq_combined_spikes.txt

#Creation of file containing correlation coefficient between concentration and NRN for each sample and % of spikes represented by reads (mean between all samples).
#Creation of graphic concentration = f(NRN) for each sample.
#data normalization, calculation of NRN & generation of graphics

echo "`date` Creation of graphics Concentration = f(NRN)"
echo "source(\"$SCRIPTSDIR_SPIKES/NRN_graphic_script.R\");
filename = \"$HTSeqFile\";outdir = \"$OUTDIR/Quality/Spikes\";length =\"$LENGTH_SPIKES\"; concentration = \"$CONCENTRATION_SPIKES\";
NRN(filename, outdir, length, concentration)" | $RBIN --no-save --no-restore --quiet

wait

#Creation of graphic Expected Fold Change = Observed Fold Change
################################################################
echo "Creation of graphic Expected Fold Change = Observed Fold Change"

FileReadsNumber=$OUTDIR/Quality/Spikes/Datanorm.txt

echo "source(\"$SCRIPTSDIR_SPIKES/FoldChange_graphic_script.R\");
filename = \"$FileReadsNumber\"; outdir = \"$OUTDIR/Quality/Spikes\"; ExpectedFold = \"$FOLDCHANGE_SPIKES\";
FoldChange(filename, outdir, ExpectedFold)" | $RBIN --no-save --no-restore --quiet

wait

echo "****************************************"
echo "`date`: all analysis of Spikes : done"
echo "****************************************"

wait

# SPIKES BODY COVERAGE
# creates a graph showing the coverage of reads along the spikes with RSeQC
sh ${SCRIPTSDIR}/src/Spikes/SpikesBodyCoverage.sh -c $CONFIG_FILE -o $OUTDIR
	
echo "****************************************"
echo "`date`: Start analysis of Spikes (Coverage of reads along spikes) : done "
echo "****************************************"

# Creation of folders containing Spikes report

if [ ! -e "${OUTDIR}/Report" ]
then

	make_directories ${OUTDIR}/Report

fi

make_directories ${OUTDIR}/Report/Spikes
# Creation of log file of automatic report pf spikes
LOGFILE_SPIKES="${OUTDIR}/Logs/log_file_Spikes.txt"
touch "${LOGFILE_SPIKES}"
# Creation of Spikes auto report
sh ${SCRIPTSDIR_SPIKES}/Report/SpikesReport.sh -c $CONFIG_FILE -o $OUTDIR

echo "****************************************"
echo "`date`: generation of auto report of Spikes : done"
echo "****************************************"


